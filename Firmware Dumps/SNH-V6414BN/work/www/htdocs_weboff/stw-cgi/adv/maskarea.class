<?php

define('MAX_PRIVACY_AREA_7000', 20);
define('MAX_VAMASK_AREA', 4);
define('MAX_PRIVACY_AREA', 12);
define('MAX_MASK_AREA_POINT', 12);
define('MAX_TRACKING_MASK_AREA', 8);

class MaskAreas
{

    public $maskArea;
    public $maxAreaSize;
    public $payload;
    public $headerInfo;
    public $unpackFormat;
    public $errorCode;

    function __construct($_command, $_maxArea)
    {
        $this->headerInfo = array('Command' => $_command, 'Action' => ACTION_GET_ALL);
        $this->maxAreaSize = $_maxArea;
        for ($index = 0; $index < $this->maxAreaSize; ++$index)
        {
            $this->maskArea[$index] = new MaskArea($_command);
        }
        $this->unpackFormat = MakeUnpackFormat('maskArea', $this->maskArea[0]->payloadLength, $this->maxAreaSize);
    }

    function PayloadToArray($_payload)
    {
        $_dataArray = unpack($this->unpackFormat, $_payload);
        for ($index = 0; $index < $this->maxAreaSize; ++$index)
        {
            $this->maskArea[$index]->UnpackData($_dataArray['maskArea' . $index]);
        }
    }

    function SetErrorCode($_error)
    {
        $this->errorCode = $_error;
    }
}

class MaskArea
{

    public $point;
    public $normalPoint;
    public $ptzPosition;
    public $dataInfo;
    public $payload;
    public $headerInfo;
    public $dataFormat;
    public $unpackFormat;
    public $payloadLength;
    public $errorCode;

    function __construct($_command)
    {
        $this->headerInfo = array( 'Command'=>$_command, 'Action'=>ACTION_ADD);

			for ($index=0; $index<MAX_MASK_AREA_POINT; ++$index)
			{
				$this->point[$index] = new Point();
				$this->normalPoint[$index] = new Point();
			}
			$this->ptzPosition = new PrivacyPtzPosition();
			
			if ($this->headerInfo['Command'] == CMD_TRACKING_TRACEZONE) {
				$this->dataInfo 	= array(	'Index' 		=> array('value'=>0, 'type'=>'i1'),
													'Enabled' 	=> array('value'=>0, 'type'=>'c1'),
													'Name' 		=> array('value'=>'', 'type'=>'A12'),
													'Color' 		=> array('value'=>5, 'type'=>'i1'),
													'NumPoint' 	=> array('value'=>4, 'type'=>'c1'),
													'Mode' 		=> array('value'=>0, 'type'=>'c1'),
													'Reserved' 	=> array('value'=>'', 'type'=>'A2'));
				$this->unpackFormat	= MakeDataFormat($this->dataInfo).MakeUnpackFormat('point', GetDataInfoLength($this->point[0]->dataInfo), MAX_MASK_AREA_POINT).'A'.GetDataInfoLength($this->ptzPosition->dataInfo).'ptzPosition/'.MakeUnpackFormat('normalPoint', GetDataInfoLength($this->point[0]->dataInfo), MAX_MASK_AREA_POINT);
				$this->payloadLength	= GetDataInfoLength($this->dataInfo)+(GetDataInfoLength($this->point[0]->dataInfo)*MAX_MASK_AREA_POINT)+GetDataInfoLength($this->ptzPosition->dataInfo)+(GetDataInfoLength($this->normalPoint[0]->dataInfo)*MAX_MASK_AREA_POINT);
			}
			else {
				$this->dataInfo 	= array(	'Index' 		=> array('value'=>0, 'type'=>'i1'),
													'Enabled' 	=> array('value'=>0, 'type'=>'c1'),
													'Name' 		=> array('value'=>'', 'type'=>'A12'),
													'Color' 		=> array('value'=>5, 'type'=>'i1'),
													'NumPoint' => array('value' => 4, 'type' => 'i1'),
													'ZoomThreshold' => array('value' => 0, 'type' => 'c1'));

				$this->unpackFormat	= MakeDataFormat($this->dataInfo).MakeUnpackFormat('point', GetDataInfoLength($this->point[0]->dataInfo), MAX_MASK_AREA_POINT).'A'.GetDataInfoLength($this->ptzPosition->dataInfo).'ptzPosition';
				$this->payloadLength	= GetDataInfoLength($this->dataInfo)+(GetDataInfoLength($this->point[0]->dataInfo)*MAX_MASK_AREA_POINT)+GetDataInfoLength($this->ptzPosition->dataInfo);
			}	
    }

    function XMLtoArray($_menu)
    {
        $index = 0;
        foreach ($GLOBALS['XMLArray'] as $key => $data)
        {
            if ($key == "NumPoint")
            {
                $numPoint = (int) $data;

                for ($index2 = $numPoint; $index2 < MAX_MASK_AREA_POINT; ++$index2)
                {
                    $this->point[$index2]->dataInfo['X']['value'] = 0;
                    $this->point[$index2]->dataInfo['Y']['value'] = 0;
                    $this->point[$index2]->payload = MakePayload($this->point[$index2]->dataInfo);
                }
                $this->dataInfo['NumPoint']['value'] = $data;
            }
            else if ($key == 'Point' || substr($key, 0, 5) == 'Point')
            {
                SetData($this->point[$index]->dataInfo, $this->point[$index]->payload, $data);
                $index++;
            }
            else if ($key == 'VAMask')
            {
                $maskPos = array('Left' => 0, 'Top' => 0, 'Right' => 0, 'Bottom' => 0);
                foreach ($data as $name => $value)
                {
                    $maskPos[$name] = $value;
                }

                $this->point[0]->dataInfo['X']['value'] = $maskPos['Left'];
                $this->point[0]->dataInfo['Y']['value'] = $maskPos['Top'];
                $this->point[1]->dataInfo['X']['value'] = $maskPos['Right'];
                $this->point[1]->dataInfo['Y']['value'] = $maskPos['Top'];
                $this->point[2]->dataInfo['X']['value'] = $maskPos['Right'];
                $this->point[2]->dataInfo['Y']['value'] = $maskPos['Bottom'];
                $this->point[3]->dataInfo['X']['value'] = $maskPos['Left'];
                $this->point[3]->dataInfo['Y']['value'] = $maskPos['Bottom'];

                for ($index2 = 0; $index2 < MAX_MASK_AREA_POINT; ++$index2)
                {
                    $this->point[$index2]->payload = MakePayload($this->point[$index2]->dataInfo);
                }
            }
            else if ($key == 'Index' || $key == 'Name' || $key == 'Color' || $key == 'ZoomThreshold')
            {
                $this->dataInfo[$key]['value'] = $data;
            }
        }

        if ($this->headerInfo['Action'] == ACTION_ADD || $this->headerInfo['Action'] == ACTION_ZOOM_THRESHOLD)
        {
            $this->SetPayload();
        }
        else if ($this->headerInfo['Action'] == ACTION_REMOVE || $this->headerInfo['Action'] == ACTION_MOVE_MASK)
        {
            $this->payload = pack('i1', $this->dataInfo['Index']['value']);
        }
        else
        {
            $this->SetPayload();
        }
    }

    function PayloadToArray($_payload) // only if Action is START
    {
        $this->UnpackData($_payload);
    }

    function UnpackData($_dataArray)
    {
        $_dataArray = unpack($this->unpackFormat, $_dataArray);
        $this->dataInfo['Index']['value'] = $_dataArray['Index'];
        $this->dataInfo['Enabled']['value'] = $_dataArray['Enabled'];
        $this->dataInfo['Name']['value'] = trim($_dataArray['Name']);
        $this->dataInfo['Color']['value'] = $_dataArray['Color'];
        $this->dataInfo['NumPoint']['value'] = $_dataArray['NumPoint'];
		$this->dataInfo['ZoomThreshold']['value'] = $_dataArray['ZoomThreshold'];
        for ($index = 0; $index < MAX_MASK_AREA_POINT; ++$index)
        {
            SetData($this->point[$index]->dataInfo, $this->point[$index]->payload, $_dataArray['point' . $index]);
        }
        SetData($this->ptzPosition->dataInfo, $this->ptzPosition->payload, $_dataArray['ptzPosition']);
        if ($this->headerInfo['Command'] == CMD_TRACKING_TRACEZONE) {
			for ($index=0; $index<MAX_MASK_AREA_POINT; ++$index)
			{
				SetData($this->normalPoint[$index]->dataInfo, $this->normalPoint[$index]->payload, $_dataArray['normalPoint'.$index]);
			}
		}
    }

    function SetPayload()
    {
        if ($this->headerInfo['Command'] == CMD_TRACKING_TRACEZONE) {
			$this->payload = MakePayload($this->dataInfo).GetPayloads($this->point, MAX_MASK_AREA_POINT).MakePayload($this->ptzPosition->dataInfo).GetPayloads($this->normalPoint, MAX_MASK_AREA_POINT);
		}
		else {
			$this->payload = MakePayload($this->dataInfo).GetPayloads($this->point, MAX_MASK_AREA_POINT).MakePayload($this->ptzPosition->dataInfo);
		}
    }

    function SetErrorCode($_error)
    {
        $this->errorCode = $_error;
    }

}

class Point
{
    public $payload;
    public $dataInfo;

    function __construct()
    {
        $this->dataInfo = array('X' => array('value' => 0, 'type' => 'i1'),
            'Y' => array('value' => 0, 'type' => 'i1'));
        $this->payload = MakePayload($this->dataInfo);
    }
}

class PrivacyPtzPosition
{
    public $payload;
    public $dataInfo;

    function __construct()
    {
        $this->dataInfo = array('Pan' => array('value' => 0, 'type' => 'i1'),
            'Tilt' => array('value' => 0, 'type' => 'i1'),
            'Zoom' => array('value' => 0, 'type' => 'i1'),
            'DZoom' => array('value' => 0, 'type' => 'i1'));
        $this->payload = MakePayload($this->dataInfo);
    }
}

?>
