<?php
define('MAX_NETWORK_PROTOCOL',	6);

class  NetworkProtocols
{
	public 	$rtspTimeout;
	public 	$protocol;

	public 	$payload;
	public 	$dataInfo;
	public 	$headerInfo;

	function __construct($_action=ACTION_GET)
	{
		$this->headerInfo 	= array(	'Command'=>CMD_PROTOCOL_SETTING, 'Action'=>$_action);
		for ($index=0; $index<MAX_NETWORK_PROTOCOL; ++$index)
			$this->protocol[$index] = new NetworkProtocol();
	}

	function PayloadToArray($_payload)
	{
		$unpackFormat = MakeUnpackFormat('protocol', GetDataInfoLength($this->protocol[0]->dataInfo), MAX_NETWORK_PROTOCOL).'c1RTSPTimeout';
		$dataArray = unpack($unpackFormat, $_payload);
		for ($index=0; $index<MAX_NETWORK_PROTOCOL; ++$index)
			SetData($this->protocol[$index]->dataInfo, $this->protocol[$index]->payload, $dataArray['protocol'.$index]);
		$this->rtspTimeout = $dataArray['RTSPTimeout'];
	}

	function XMLtoArray($_menu)
	{
		$portName = array('HTTP'=>0, 'HTTPS'=>1, 'RTSP'=>2, 'VNP'=>3, 'RTP'=>4, 'WebViewer'=>5);
		foreach($GLOBALS['XMLArray'] as $name=>$data) {
			if ($name == 'RTSPTimeout') 	$this->rtspTimeout = $data;
			else 	SetData($this->protocol[$portName[$name]]->dataInfo, $this->protocol[$portName[$name]]->payload, $data);
		}
		$this->SetPayload();
	}

	function SetPayload()
	{
		$this->payload = GetPayloads($this->protocol, MAX_NETWORK_PROTOCOL).pack('c1', $this->rtspTimeout);
	}
}

class NetworkProtocol
{
	public $payload;
	public $dataInfo;

	function __construct()
	{
		$this->dataInfo = array(	'Name' 	=> array('value'=>0, 'type'=>'c1'),
										'Enabled'=> array('value'=>0, 'type'=>'c1'),
										'Port' 	=> array('value'=>0, 'type'=>'i1'));
		$this->payload = MakePayload($this->dataInfo);
	}
}
?>
